name: Create release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        required: true
env:
  RELEASE_MESSAGE: release_message.md
jobs:
  prepare_release:
    runs-on: ubuntu-latest
    steps:
      - name: Check semver
        shell: python
        run: |
          import re
          semver_regex = re.compile(
              r"^(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$")
          
          if semver_regex.match("${{ github.event.inputs.version }}") is None:
              raise Exception("Argument ${{ github.event.inputs.version }} is not a semver")
      - name: Break on invalid branch
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "This workflow can be only run on main branch: ${{ github.ref }}"
          exit 1
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Format changelog and build release message
        run: python ${{ github.workspace }}/.github/format_changelog.py -v ${{ github.event.inputs.version }} --extract ${{ env.RELEASE_MESSAGE }}
      - name: Bump .csproj version
        shell: python
        run: |
          from xml.etree import ElementTree
          import pathlib
          from xml.etree.ElementTree import Element, SubElement
          PROPERTY_GROUP = "PropertyGroup"
          VERSION = "Version"



          cs_proj_path = pathlib.Path(r"${{ github.workspace }}/EyeTrackerStreamingAvalonia/EyeTrackerStreamingAvalonia.csproj")
          version = "${{ github.event.inputs.version }}"
          if not cs_proj_path.exists():
              raise Exception("Missing csproj file")
          tree = ElementTree.parse(cs_proj_path)
          root = tree.getroot()


          def walk_property_group(property_group) -> Element | None:
              for child in property_group:
                  if child.tag == PROPERTY_GROUP:
                      walk_property_group(property_group)
                  elif child.tag == VERSION:
                      return child
              return None


          for child in root:
              if child.tag == "PropertyGroup":
                  node = walk_property_group(child)
                  if node is not None:
                      node.text = version
                      break
          else:
              prop_group = SubElement(root, PROPERTY_GROUP)
              version = SubElement(prop_group, VERSION)
              version.text = version
          tree.write(cs_proj_path)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies # depends on setup-dotnet
        run: dotnet restore
      - name: Test # depends on setup-dotnet
        run: dotnet test --no-restore --verbosity normal
      - name: Publish windows # depends on setup-dotnet
        run: dotnet publish -c Release -r win-x64 -p:IncludeSourceRevisionInInformationalVersion=false -o windowsPublish ./EyeTrackerStreamingAvalonia/EyeTrackerStreamingAvalonia.csproj
      - name: Pack release files
        shell: python
        run: |
          import os
          import zipfile
          version = "${{ github.event.inputs.version }}"
          folder_path = r"${{ github.workspace }}/windowsPublish"
          out_file_name = fr"Inseye-Remote-Connector-Desktop_{version}.zip"
          archive_path = fr"{folder_path}/{out_file_name}"
          folder_path = os.path.abspath(folder_path)
          archive_path = os.path.abspath(archive_path)
          with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:
              for root, dirs, files in os.walk(folder_path):
                  for file in files:
                      if file == out_file_name:
                          continue
                      file_path = os.path.join(root, file)
                      print(f"Adding {file_path} to archive")
                      archive.write(file_path, os.path.relpath(file_path, folder_path))
          print(f"Archive path: {str(archive_path)}")
      - name: Ls
        run: ls ${{ github.workspace }}/windowsPublish
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[Auto] Version bumped to ${{ github.event.inputs.version }}"
          file_pattern: ":(exclude)${{ env.RELEASE_MESSAGE }} :(exclude)*windowsPublish*"
      - uses: ncipollo/release-action@v1
        with:
          tag: "${{ github.event.inputs.version }}"
          draft: true
          bodyFile: "${{ env.RELEASE_MESSAGE }}"
          artifacts: "${{ github.workspace }}/windowsPublish/Inseye-Remote-Connector-Desktop_${{ github.event.inputs.version }}.zip"